#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
gen_sgRNAs.py generates sgRNAs as part of ExcisionFinder. Written in Python v 3.6.1.
Kathleen Keough 2018.

Usage:
    gen_sgRNAs.py <gens_file> <targ_file> <locus> <pams_dir> <ref_fasta> <out_dir> <cas_types> <guide_length> [<gene_vars>]

Arguments:
    gens_file           Explicit genotypes file generated by get_chr_tables.sh for genome of interest.
    targ_file           Annotated variant targetability for allele-specificity.
    locus               Locus of interest in format chrom:start-stop
    pams_dir            Directory where pam locations in the reference genome are located. 
    ref_genome_fasta    Fasta file for reference genome used, e.g. hg38.
    out_dir             Directory in which to save the output files.
    cas_types           Cas types you would like to analyze, comma-separated (e.g. SpCas9,SaCas9).
    guide_length        Guide length, commonly 20 bp, comma-separated if different for different cas types.
gene_vars               Optional. Gene variants HDF5 file originating from 1000 Genomes Data, formatted
                        in order to add rsID and allele frequency (AF) data to variants. Pre-generated,
                        download here:http://lighthouse.ucsf.edu/public_files_no_password/excisionFinderData_public/mfn2_ef_tutorial/.


Available cas types:
cpf1, SpCas9, SpCas9_VRER, SpCas9_EQR, SpCas9_VQR_1, SpCas9_VQR_2, 
StCas9, StCas9_2, SaCas9, SaCas9_KKH, nmCas9, cjCas9
"""

import pandas as pd
import numpy as np
from docopt import docopt
import os
import crisprtools
from pyfaidx import Fasta
import regex

__version__ = '0.0.0'

# 3 and 5 prime cas lists

TP_CAS_LIST = ['SpCas9', 'SpCas9_VRER', 'SpCas9_EQR', 'SpCas9_VQR_1',
               'SpCas9_VQR_2', 'StCas9', 'StCas9_2', 'SaCas9', 'SaCas9_KKH', 'nmCas9', 'cjCas9']

FP_CAS_LIST = ['cpf1']

# "three-prime PAMs, e.g. Cas9, PAM is 3' of the sgRNA sequence"
tpp_for = {}

tpp_for['SpCas9'] = r'[atcg]gg' # SpCas9, SpCas9-HF1, eSpCas1.1
tpp_for['SpCas9_VRER'] = r'[atcg]gcg' # SpCas9 VRER variant
tpp_for['SpCas9_EQR'] = r'[actg]gag' # SpCas9 EQR variant
tpp_for['SpCas9_VQR_1'] = r'[atcg]ga' # SpCas9 VQR variant 1
tpp_for['SpCas9_VQR_2'] = r'[atcg]g[atcg]g' # SpCas9 VQR variant 2
tpp_for['StCas9'] = r'[actg]{2}agaa' # S. thermophilus Cas9
tpp_for['StCas9_2'] = r'[actg]gg[actg]g' # S. thermophilus Cas9 2
tpp_for['SaCas9'] = r'[atcg]{2}g[ag]{2}t' # SaCas9
tpp_for['SaCas9_KKH'] = r'[atcg]{3}[ag]{2}t' # SaCas9 KKH variant
tpp_for['nmCas9'] = r'[atcg]{4}g[ac]tt' # nmCas9
tpp_for['cjCas9'] = r'[actg]{4}aca' # campylobacter jejuni Cas9

# find 3' PAMs on antisense strand (reverse complement)
tpp_rev = {}

tpp_rev['SpCas9_rev'] = r'cc[atcg]' # SpCas9 reverse complement 
tpp_rev['SpCas9_VRER_rev'] = r'cgc[atcg]' # SpCas9 VRER variant reverse complement 
tpp_rev['SpCas9_EQR_rev'] = r'ctc[actg]' # SpCas9 EQR variant reverse complement 
tpp_rev['SpCas9_VQR_1_rev'] = r'[atcg]tc[atcg]' # SpCas9 VQR variant 1 reverse complement 
tpp_rev['SpCas9_VQR_2_rev'] = r'c[atcg]c[atcg]' # SpCas9 VQR variant 2 reverse complement 
tpp_rev['StCas9_rev'] = r'ttct[actg]{2}' # S. thermophilus Cas9 reverse complement
tpp_rev['StCas9_2_rev'] = r'g[atcg]gg[atcg]' # S. thermophilus Cas9 2 reverse complement 
tpp_rev['SaCas9_rev'] = r't[tc]{2}c[atcg]{2}' # SaCas9 reverse complement 
tpp_rev['SaCas9_KKH_rev'] = r'a[tc]{2}[atcg]{3}' # SaCas9 KKH variant reverse complement 
tpp_rev['nmCas9_rev'] = r'aa[tg]c[atcg]{4}' # NmCas9 reverse complement 
tpp_rev['cjCas9_rev'] = r'tgt[actg]{4}' # campylobacter jejuni Cas9

# "five-prime PAMs, e.g. cpf1, PAM is 5' of the sgRNA sequence"
fpp_for = {}

fpp_for['cpf1'] = r'ttt[atcg]' # Cpf1, PAM 5' of guide

# find 5' PAMs on antisense strand (reverse complement)
fpp_rev = {}

fpp_rev['cpf1_rev'] = r'[atcg]aaa' # Cpf1, PAM 5' of guide

#CAS_LIST = ['cpf1', 'SpCas9', 'SpCas9_VRER', 'SpCas9_EQR', 'SpCas9_VQR_1',
 #           'SpCas9_VQR_2', 'StCas9', 'StCas9_2', 'SaCas9', 'SaCas9_KKH', 'nmCas9', 'cjCas9']


def check_heterozgosity(gens_in):
    """
    Takes in the raw pandas DF and returns the columns who's genotype is HET.
    :param gens_in: The input gens file, pandas.Dataframe.
    :return: The input gens file without HOMO vars, pandas.Dataframe. 
    """
    return gens_in[gens_in.apply(lambda row: \
        row['genotype'].split('/')[0] != row['genotype'].split('/')[1], axis=1)]


def get_range_upstream(pam_pos, pam_length, guide_length):
    """
    Get positions within specified sgRNA length bp upstream, i.e. for forward 3' PAMs or reverse 5' PAMs
    :param pam_pos: position of PAM, int.
    :return: sgRNA seed region positions, set of ints.
    """
    sgrna = list(range(pam_pos - guide_length - 1, pam_pos + pam_length))
    return sgrna


def get_range_downstream(pam_pos, pam_length, guide_length):
    """
    Get positions within specified sgRNA length bp downstream, i.e. for forward 3' PAMs or reverse 5' PAMs
    :param pam_pos: position of PAM, int.
    :return: sgRNA seed region positions, set of ints.
    """
    sgrna = list(range(pam_pos - pam_length, pam_pos + guide_length + 1))
    return sgrna


def get_alt_seq(chrom, pam_start, var_pos, ref, alt, guide_length, ref_genome, strand='positive', var_type='near_pam'):

    if strand == 'positive':

        if var_type == 'near_pam':

            # reference sgRNA

            ref_seq = ref_genome['chr'+str(chrom)][pam_start - guide_length - 1:pam_start - 1]

            # alt sgRNA 

            alt_seq = ref_genome['chr'+str(chrom)][pam_start - guide_length - 1:var_pos - 1].lower() + alt.upper() + ref_genome['chr'+str(chrom)][var_pos + len(alt) - 1:pam_start - 1].lower()

        elif var_type == 'destroys_pam':

            # reference sgRNA

            ref_seq = ref_genome['chr'+str(chrom)][pam_start - guide_length - 1:pam_start - 1]

            # in this case, variant is destroying a PAM, rendering the alternate allele no longer a CRISPR site
            # therefore, for lack of a better solution, return empty alt_seq

            alt_seq = '_'

        elif var_type == 'makes_pam': # this might break with indels

            # reference sgRNA

            ref_seq = '_'

            # in this case, variant is destroying a PAM, rendering the alternate allele no longer a CRISPR site
            # therefore, for lack of a better solution, return empty alt_seq

            alt_seq = ref_genome['chr'+str(chrom)][pam_start - guide_length - 1:pam_start - 1]

        return ref_seq.upper(), alt_seq.upper()

    elif strand == 'negative':

        if var_type == 'near_pam':

            # reference sgRNA

            ref_seq = ref_genome['chr'+str(chrom)][pam_start:pam_start + guide_length]

            # alt sgRNA 

            alt_seq = ref_genome['chr'+str(chrom)][pam_start:var_pos - 1].lower() + alt.upper() + ref_genome['chr'+str(chrom)][var_pos + len(alt) - 1:pam_start + guide_length].lower()

        elif var_type == 'destroys_pam':

            # reference sgRNA

            ref_seq = ref_genome['chr'+str(chrom)][pam_start:pam_start + guide_length]

            # in this case, variant is destroying a PAM, rendering the alternate allele no longer a CRISPR site
            # therefore, for lack of a better solution, return empty alt_seq

            alt_seq = '_'

        elif var_type == 'makes_pam': # this might break with indels

            # reference sgRNA

            ref_seq = '_'

            alt_seq = ref_genome['chr'+str(chrom)][pam_start:pam_start + guide_length ]

        return ref_seq.upper(), alt_seq.upper()

    else:

        print ('Must specify strand, exiting at line 190.')

        exit()


def main(args):
    
    print(args)
    out_dir = args['<out_dir>']
    pams_dir = args['<pams_dir>']
    gens = args['<gens_file>']
    targ_gens = args['<targ_file>']
    locus = args['<locus>']
    chrom = locus.split(':')[0]
    if chrom.startswith('chr'):
        chrom = chrom[3:]
    start,stop = locus.split(':')[1].split('-')
    start =int(start) - 50
    stop = int(stop) + 50
    ref_genome = Fasta(args['<ref_fasta>'], as_raw=True)
    global CAS_LIST
    CAS_LIST = list(args['<cas_types>'].split(','))
    guide_length = int(args['<guide_length>'])

    # load locus variants
    gens = pd.read_hdf(gens)#.query('pos <= @stop and pos >= @start').head(5) # remove the stop once finished testing

    gens = check_heterozgosity(gens)

    if gens.empty:
        print('No het variants in that region in this genome, exiting.')
        exit()

    chr_variants = set(gens.pos.tolist())
    print('There are ' + str(len(chr_variants)) + ' het variants in this locus in this genome.')

    # load variant annotations
    targ_gens = pd.read_hdf(targ_gens)

    # initialize dictionary to save locations of PAM proximal variants
    pam_prox_vars = {}

    # initialize lists that will eventually become the output dataframe
    starts = []
    stops = []
    refs = []
    alts = []
    grna_refs = []
    grna_alts = []
    variant_pos_in_guides = []
    cas_types = []
    chroms = []
    variants_positions = []
    strands = []
    pam_pos = []

    # # get variants within sgRNA region for 3 prime PAMs (guide_length bp upstream of for pos and vice versa)

    for cas in CAS_LIST:
        pam_for_pos = np.load(os.path.join(pams_dir, f'chr{chrom}_{cas}_pam_sites_for.npy')).tolist()
        pam_for_pos = list(filter(lambda x: x >= start and x <= stop, pam_for_pos))
        pam_rev_pos = np.load(os.path.join(pams_dir, f'chr{chrom}_{cas}_pam_sites_rev.npy')).tolist()
        pam_rev_pos = list(filter(lambda x: x >= start and x <= stop, pam_rev_pos))
        if cas in TP_CAS_LIST:
            print(f'Currently evaluating {cas}.')
            if cas in crisprtools.tpp_for.keys():
                pam_length = crisprtools.tpp_for[cas][1]
            else:
                print('Something is wrong, exiting.') # change this to actual exception
            cas_prox_vars = []
            vars_near_pams = targ_gens.query(f'var_near_{cas} == 1')
            vars_make_pam = targ_gens.query(f'makes_{cas} == 1')
            vars_destroy_pam = targ_gens.query(f'breaks_{cas} == 1')
            # vars_in_pam = targ_gens.query(f'(makes_{cas} == 1) or (breaks_{cas} == 1)')
            for index, row in vars_near_pams.iterrows():
                var = row['pos']
                proximal_sites_for = list(range(row['pos'], row['pos']+guide_length+1))
                nearby_for_pams = list(set(proximal_sites_for) & set(pam_for_pos))
                for pam_site in nearby_for_pams:
                    start = pam_site - guide_length - 1
                    starts.append(start)
                    stops.append(pam_site - 1)
                    ref_allele = row['ref']
                    refs.append(ref_allele)
                    alt_allele = row['alt']
                    alts.append(alt_allele)
                    grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, alt_allele, guide_length, ref_genome, var_type='near_pam')
                    grna_refs.append(grna_ref_seq)
                    grna_alts.append(grna_alt_seq)
                    var_pos = pam_site - var - 1 + pam_length
                    variant_pos_in_guides.append(var_pos)
                    cas_types.append(cas)
                    chroms.append(chrom)
                    variants_positions.append(var)
                    strands.append('+')
                    pam_pos.append(pam_site)
                proximal_sites_rev = list(range(row['pos']-guide_length,row['pos']))
                nearby_rev_pams = list(set(proximal_sites_rev) & set(pam_rev_pos))
                for pam_site in nearby_rev_pams:
                    var = row['pos']
                    start = pam_site 
                    starts.append(start)
                    stops.append(pam_site + guide_length)
                    ref_allele = row['ref']
                    refs.append(ref_allele)
                    alt_allele = row['alt']
                    alts.append(alt_allele)
                    grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, alt_allele, guide_length, ref_genome, 
                        strand='negative', var_type='near_pam')
                    grna_refs.append(grna_ref_seq)
                    grna_alts.append(grna_alt_seq)
                    var_pos = var - pam_site + pam_length - 1
                    variant_pos_in_guides.append(var_pos)
                    cas_types.append(cas)
                    chroms.append(chrom)
                    variants_positions.append(var)
                    strands.append('-')
                    pam_pos.append(pam_site)
            for index, row in vars_destroy_pam.iterrows():
                var = row['pos']
                ref = row['ref']
                alt = row['alt']
                ref_seq = ref_genome['chr'+str(chrom)][var - 11:var + 10]

                if len(ref) > len(alt):  # handles deletions
                    alt_seq = ref_genome['chr'+str(chrom)][var - 11:var - 1] + alt + ref_genome['chr'+str(chrom)][
                                                                         var + len(ref) + len(alt) - 2:var + len(ref) + len(
                                                                             alt) - 2 + 10]
                else:
                    alt_seq = ref_genome['chr'+str(chrom)][var - 11:var - 1] + alt + ref_genome['chr'+str(chrom)][
                                                                         var + len(alt) - 1:var + len(alt) - 1 + 10]

                ref_pams_for, ref_pams_rev = crisprtools.find_spec_pams(cas, ref_seq)
                alt_pams_for, alt_pams_rev = crisprtools.find_spec_pams(cas, alt_seq)

                lost_pams_for = list(set(ref_pams_for).difference(set(alt_pams_for)))
                lost_pams_rev = list(set(ref_pams_rev).difference(set(alt_pams_rev)))

                for pam in lost_pams_for:
                    pam_site = pam + var - 11
                    ref_allele = ref
                    alt_allele = alt
                    grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, alt_allele, guide_length, ref_genome, 
                        var_type='destroys_pam')
                    start = pam_site - guide_length - 1
                    starts.append(start)
                    stops.append(pam_site - 1)
                    ref_allele = row['ref']
                    refs.append(ref_allele)
                    alt_allele = row['alt']
                    alts.append(alt_allele)
                    grna_refs.append(grna_ref_seq)
                    grna_alts.append(grna_alt_seq)
                    var_pos = pam_site + pam_length - var
                    variant_pos_in_guides.append(var_pos)
                    cas_types.append(cas)
                    chroms.append(chrom)
                    variants_positions.append(var)
                    strands.append('+')
                    pam_pos.append(pam_site)
                for pam in lost_pams_rev:
                    pam_site = pam + var - 11
                    ref_allele = ref
                    alt_allele = alt
                    grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, alt_allele, guide_length, ref_genome, 
                        strand='negative', var_type='destroys_pam')
                    start = pam_site
                    starts.append(start)
                    stop = pam_site + guide_length
                    stops.append(stop)
                    refs.append(ref_allele)
                    alts.append(alt_allele)
                    grna_refs.append(grna_ref_seq)
                    grna_alts.append(grna_alt_seq)
                    var_pos = var - pam_site + pam_length - 1
                    variant_pos_in_guides.append(var_pos)
                    cas_types.append(cas)
                    chroms.append(chrom)
                    variants_positions.append(var)
                    strands.append('-')
                    pam_pos.append(pam_site)

            for index, row in vars_make_pam.iterrows():

                var = row['pos']
                ref = row['ref']
                alt = row['alt']

                ref_seq = ref_genome['chr'+str(chrom)][var - 11:var + 10]

                if len(ref) > len(alt):  # handles deletions
                    alt_seq = ref_genome['chr'+str(chrom)][var - 11:var - 1] + alt + ref_genome['chr'+str(chrom)][
                                                                         var + len(ref) + len(alt) - 2:var + len(ref) + len(
                                                                             alt) - 2 + 10]
                else:
                    alt_seq = ref_genome['chr'+str(chrom)][var - 11:var - 1] + alt + ref_genome['chr'+str(chrom)][
                                                                         var + len(alt) - 1:var + len(alt) - 1 + 10]
    
                ref_pams_for, ref_pams_rev = crisprtools.find_spec_pams(cas, ref_seq)
                alt_pams_for, alt_pams_rev = crisprtools.find_spec_pams(cas, alt_seq)

                made_pams_for = list(set(alt_pams_for).difference(set(ref_pams_for)))
                made_pams_rev = list(set(alt_pams_rev).difference(set(ref_pams_rev)))

                for pam in made_pams_for:
                    pam_site = var - 11 + pam
                    ref_allele = ref
                    alt_allele = alt
                    grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, alt_allele, guide_length, ref_genome, 
                        var_type='makes_pam')
                    start = pam_site - guide_length - 1
                    starts.append(start)
                    stops.append(pam_site - 1)
                    ref_allele = row['ref']
                    refs.append(ref_allele)
                    alt_allele = row['alt']
                    alts.append(alt_allele)
                    grna_refs.append(grna_ref_seq)
                    grna_alts.append(grna_alt_seq)
                    var_pos = pam_site + pam_length - var
                    variant_pos_in_guides.append(var_pos)
                    cas_types.append(cas)
                    chroms.append(chrom)
                    variants_positions.append(var)
                    strands.append('+')
                    pam_pos.append(pam_site)
                for pam in made_pams_rev:
                    pam_site = var - 11 + pam
                    ref_allele = ref
                    alt_allele = alt
                    grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, alt_allele, guide_length, ref_genome, 
                        strand='negative', var_type='makes_pam')
                    start = pam_site
                    starts.append(start)
                    stop = pam_site + guide_length
                    stops.append(stop)
                    refs.append(ref_allele)
                    alts.append(alt_allele)
                    grna_refs.append(grna_ref_seq)
                    grna_alts.append(grna_alt_seq)
                    var_pos = var - pam_site + pam_length
                    variant_pos_in_guides.append(var_pos)
                    cas_types.append(cas)
                    chroms.append(chrom)
                    variants_positions.append(var)
                    strands.append('-')
                    pam_pos.append(pam_site)

           

    chroms = list(map(lambda x: 'chr'+str(x),chroms))

    out = pd.DataFrame({'chrom':chroms,'start':starts, 'stop':stops, 'ref':refs, 'alt':alts,
        'cas_type':cas_types, 'gRNA_ref':grna_refs, 'gRNA_alt':grna_alts, 'variant_position_in_guide':variant_pos_in_guides,
        'variant_position':variants_positions, 'strand': strands})

    out = out[['chrom','start','stop','ref','alt','variant_position_in_guide','gRNA_ref','gRNA_alt',
    'variant_position','strand','cas_type']]
    out = out.query('variant_position_in_guide != 2')
    # get rsID and AF info if provided
    if args['<gene_vars>']:
        gene_vars = pd.read_hdf(args['<gene_vars>'], where='pos >= start and pos <= stop')
        if str(gene_vars['chrom'].tolist()[0]).startswith('chr'):
            gene_vars['chrom'] = list(map(lambda x: 'chr' + str(x), gene_vars['chrom']))
        out = out.merge(gene_vars, how='left')

        gene_vars['chrom'] = list(map(lambda x: 'chr' + str(x), gene_vars['chrom']))
    out.to_csv(out_dir + '_guides.tsv', sep='\t', index=False)
    print('Done.')


if __name__ == '__main__':
    arguments = docopt(__doc__, version=__version__)
    main(arguments)
