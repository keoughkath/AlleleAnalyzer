#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
gen_sgRNAs.py generates sgRNAs as part of ExcisionFinder. Written in Python v 3.6.1.
Kathleen Keough 2018.

Usage:
    gen_sgRNAs.py [-ch] <gens_file> <targ_file> <locus> <pams_dir> <ref_fasta> <out_dir> <cas_types> <guide_length> [<gene_vars>] [--crispor] [<ref_gen>] [--hom] [--multi]

Arguments:
    gens_file           Explicit genotypes file generated by get_chr_tables.sh for genome of interest.
    targ_file           Annotated variant targetability for allele-specificity.
    locus               Locus of interest in format chrom:start-stop. Put filepath to BED file here if '--multi'.
    pams_dir            Directory where pam locations in the reference genome are located. 
    ref_genome_fasta    Fasta file for reference genome used, e.g. hg38.
    out_dir             Directory in which to save the output files.
    cas_types           Cas types you would like to analyze, comma-separated (e.g. SpCas9,SaCas9).
    guide_length        Guide length, commonly 20 bp, comma-separated if different for different cas types.
    gene_vars           Optional. Gene variants HDF5 file originating from 1000 Genomes Data, formatted
                        in order to add rsID and allele frequency (AF) data to variants. 
    ref_gen             Directory name of reference genome (complete) which can be downloaded from UCSC (see wiki). This is required
                        if you specify --crispor
Options:
    -h --help
    -c                  Do not take the reverse complement of the guide sequence for '-' stranded guides (when the PAM is on the 5' end).
    --hom               Use 'homozygous' mode, which is basically finding all CRISPR sites (non-allele-specific) in a more personalized
                        way by taking in individual variants.
    --crispor           Add CRISPOR specificity scores to outputted guides. From Haeussler et al. Genome Biology 2016.
    --multi             Design sgRNAs for multiple regions specified in a BED file.

Available cas types:
cpf1, SpCas9, SpCas9_VRER, SpCas9_EQR, SpCas9_VQR_1, SpCas9_VQR_2, 
StCas9, StCas9_2, SaCas9, SaCas9_KKH, nmCas9, cjCas9
"""

import pandas as pd
import numpy as np
from docopt import docopt
import os
import crisprtools
from pyfaidx import Fasta
import regex as re
import subprocess

__version__ = '0.0.0'

# 3 and 5 prime cas lists

TP_CAS_LIST = ['SpCas9', 'SpCas9_VRER', 'SpCas9_EQR', 'SpCas9_VQR_1',
               'SpCas9_VQR_2', 'StCas9', 'StCas9_2', 'SaCas9', 'SaCas9_KKH', 'nmCas9', 'cjCas9']

FP_CAS_LIST = ['cpf1']

# "three-prime PAMs, e.g. Cas9, PAM is 3' of the sgRNA sequence"
tpp_for = {}

tpp_for['SpCas9'] = r'[atcg]gg' # SpCas9, SpCas9-HF1, eSpCas1.1
tpp_for['SpCas9_VRER'] = r'[atcg]gcg' # SpCas9 VRER variant
tpp_for['SpCas9_EQR'] = r'[actg]gag' # SpCas9 EQR variant
tpp_for['SpCas9_VQR_1'] = r'[atcg]ga' # SpCas9 VQR variant 1
tpp_for['SpCas9_VQR_2'] = r'[atcg]g[atcg]g' # SpCas9 VQR variant 2
tpp_for['StCas9'] = r'[actg]{2}agaa' # S. thermophilus Cas9
tpp_for['StCas9_2'] = r'[actg]gg[actg]g' # S. thermophilus Cas9 2
tpp_for['SaCas9'] = r'[atcg]{2}g[ag]{2}t' # SaCas9
tpp_for['SaCas9_KKH'] = r'[atcg]{3}[ag]{2}t' # SaCas9 KKH variant
tpp_for['nmCas9'] = r'[atcg]{4}g[ac]tt' # nmCas9
tpp_for['cjCas9'] = r'[actg]{4}aca' # campylobacter jejuni Cas9

# find 3' PAMs on antisense strand (reverse complement)
tpp_rev = {}

tpp_rev['SpCas9_rev'] = r'cc[atcg]' # SpCas9 reverse complement 
tpp_rev['SpCas9_VRER_rev'] = r'cgc[atcg]' # SpCas9 VRER variant reverse complement 
tpp_rev['SpCas9_EQR_rev'] = r'ctc[actg]' # SpCas9 EQR variant reverse complement 
tpp_rev['SpCas9_VQR_1_rev'] = r'[atcg]tc[atcg]' # SpCas9 VQR variant 1 reverse complement 
tpp_rev['SpCas9_VQR_2_rev'] = r'c[atcg]c[atcg]' # SpCas9 VQR variant 2 reverse complement 
tpp_rev['StCas9_rev'] = r'ttct[actg]{2}' # S. thermophilus Cas9 reverse complement
tpp_rev['StCas9_2_rev'] = r'g[atcg]gg[atcg]' # S. thermophilus Cas9 2 reverse complement 
tpp_rev['SaCas9_rev'] = r't[tc]{2}c[atcg]{2}' # SaCas9 reverse complement 
tpp_rev['SaCas9_KKH_rev'] = r'a[tc]{2}[atcg]{3}' # SaCas9 KKH variant reverse complement 
tpp_rev['nmCas9_rev'] = r'aa[tg]c[atcg]{4}' # NmCas9 reverse complement 
tpp_rev['cjCas9_rev'] = r'tgt[actg]{4}' # campylobacter jejuni Cas9

# "five-prime PAMs, e.g. cpf1, PAM is 5' of the sgRNA sequence"
fpp_for = {}

fpp_for['cpf1'] = r'ttt[atcg]' # Cpf1, PAM 5' of guide

# find 5' PAMs on antisense strand (reverse complement)
fpp_rev = {}

fpp_rev['cpf1_rev'] = r'[atcg]aaa' # Cpf1, PAM 5' of guide

#CAS_LIST = ['cpf1', 'SpCas9', 'SpCas9_VRER', 'SpCas9_EQR', 'SpCas9_VQR_1',
 #           'SpCas9_VQR_2', 'StCas9', 'StCas9_2', 'SaCas9', 'SaCas9_KKH', 'nmCas9', 'cjCas9']


def het(genotype):
    gen1, gen2 = re.split('/|\|',genotype)
    return gen1 != gen2


def get_range_upstream(pam_pos, pam_length, guide_length):
    """
    Get positions within specified sgRNA length bp upstream, i.e. for forward 3' PAMs or reverse 5' PAMs
    :param pam_pos: position of PAM, int.
    :return: sgRNA seed region positions, set of ints.
    """
    sgrna = list(range(pam_pos - guide_length - 1, pam_pos + pam_length))
    return sgrna


def get_range_downstream(pam_pos, pam_length, guide_length):
    """
    Get positions within specified sgRNA length bp downstream, i.e. for forward 3' PAMs or reverse 5' PAMs
    :param pam_pos: position of PAM, int.
    :return: sgRNA seed region positions, set of ints.
    """
    sgrna = list(range(pam_pos - pam_length, pam_pos + guide_length + 1))
    return sgrna


def get_alt_seq(chrom, pam_start, var_pos, ref, alt, guide_length, ref_genome, strand='positive', var_type='near_pam'):

    if strand == 'positive':
        if var_type == 'near_pam':
            # reference sgRNA
            ref_seq = ref_genome['chr'+str(chrom)][pam_start - guide_length - 1:pam_start - 1]
            # alt sgRNA 
            alt_seq = ref_genome['chr'+str(chrom)][pam_start - guide_length - 1:var_pos - 1].lower() + alt.upper() + ref_genome['chr'+str(chrom)][var_pos + len(alt) - 1:pam_start - 1].lower()

        elif var_type == 'destroys_pam':

            # reference sgRNA
            ref_seq = ref_genome['chr'+str(chrom)][pam_start - guide_length - 1:pam_start - 1]
            # in this case, variant is destroying a PAM, rendering the alternate allele no longer a CRISPR site
            # therefore, for lack of a better solution, return empty alt_seq
            alt_seq = 'G' * guide_length

        elif var_type == 'makes_pam': # this might break with indels

            # reference sgRNA
            ref_seq = 'G' * guide_length

            # in this case, variant is destroying a PAM, rendering the alternate allele no longer a CRISPR site
            # therefore, for lack of a better solution, return empty alt_seq
            alt_seq = ref_genome['chr'+str(chrom)][pam_start - guide_length - 1:pam_start - 1]
        return ref_seq.upper(), alt_seq.upper()

    elif strand == 'negative':
        if var_type == 'near_pam':

            # reference sgRNA
            ref_seq = ref_genome['chr'+str(chrom)][pam_start:pam_start + guide_length]
            # alt sgRNA 
            alt_seq = ref_genome['chr'+str(chrom)][pam_start:var_pos - 1].lower() + alt.upper() + ref_genome['chr'+str(chrom)][var_pos + len(alt) - 1:pam_start + guide_length].lower()

        elif var_type == 'destroys_pam':

            # reference sgRNA
            ref_seq = ref_genome['chr'+str(chrom)][pam_start:pam_start + guide_length]

            # in this case, variant is destroying a PAM, rendering the alternate allele no longer a CRISPR site
            # therefore, for lack of a better solution, return empty alt_seq
            alt_seq = 'G' * guide_length

        elif var_type == 'makes_pam': # this might break with indels

            # reference sgRNA
            ref_seq = 'G' * guide_length
            alt_seq = ref_genome['chr'+str(chrom)][pam_start:pam_start + guide_length ]
        return ref_seq.upper(), alt_seq.upper()
    else:

        print ('Must specify strand, exiting at line 190.')
        exit()

def make_rev_comp(s):
    """
    Generates reverse comp sequences from an input sequence.
    """
    return s[::-1].translate(s[::-1].maketrans('ACGT', 'TGCA'))

def get_crispor_scores(out_df, outdir, ref_gen):
    guide_seqs_ref = ['>ref_guide_seqs\n']
    guide_seqs_alt = ['>alt_guide_seqs\n']
    for index, row in out_df.iterrows():
        guide_seqs_ref.append(row['gRNA_ref'] + 'GGGNN\n') # the NN splits things up for CRISPOR
        guide_seqs_alt.append(row['gRNA_alt'] + 'GGGNN\n')
    with open('ref_seqs_nosave.fa', 'w') as f:
        for seq in guide_seqs_ref:
            f.write(seq)
    with open('alt_seqs_nosave.fa', 'w') as f:
        for seq in guide_seqs_alt:
            f.write(seq)
    # get script dir
    scriptsdir = os.path.join(os.path.dirname(__file__), 'crispor')
    run_name = os.path.join(scriptsdir, f'crispor.py --skipAlign --noEffScores -g {ref_gen} {ref_gen}')
    print('Running crispor.')
    #error_out = os.path.join(outdir, 'crispor_error.txt')
    error_out = os.path.join(os.path.dirname(outdir), 'crispor_error.txt')
    command = f'source activate crispor; \
    python2 {run_name} ref_seqs_nosave.fa nosave_ref_scores.tsv &> {error_out};\
    python2 {run_name} alt_seqs_nosave.fa nosave_alt_scores.tsv &> {error_out};\
    source deactivate crispor'
    subprocess.run(command, shell=True)
    print('crispor done')
    # subprocess.run('source deactivate crispor', shell=True)
    # remove seq files
    os.remove('ref_seqs_nosave.fa')
    os.remove('alt_seqs_nosave.fa')
    # grab scores from files outputted from CRISPOR
    score_dir_ref = pd.read_csv('nosave_ref_scores.tsv', sep='\t', header=None, names=['seqId','guideId','targetSeq',
        'mitSpecScore','offtargetCount','targetGenomeGeneLocus'])
    score_dir_alt = pd.read_csv('nosave_alt_scores.tsv', sep='\t', header=None, names=['seqId','guideId','targetSeq',
        'mitSpecScore','offtargetCount','targetGenomeGeneLocus'])
    # remove original score files
    # os.remove('nosave_ref_scores.tsv')
    # os.remove('nosave_alt_scores.tsv')
    # merge score info with original out_df
    merge_df_ref = pd.DataFrame()
    merge_df_ref['scores_ref'] = score_dir_ref['mitSpecScore']
    merge_df_ref['offtargcount_ref'] = score_dir_ref['offtargetCount']
    merge_df_ref['gRNA_ref'] = score_dir_ref['targetSeq'].str[:-3] # get rid of added on PAM site
    merge_df_alt = pd.DataFrame()
    merge_df_alt['scores_alt'] = score_dir_alt['mitSpecScore']
    merge_df_alt['offtargcount_alt'] = score_dir_alt['offtargetCount']
    merge_df_alt['gRNA_alt'] = score_dir_alt['targetSeq'].str[:-3] # get rid of added on PAM site
    # print(merge_df.head(3))
    # output outdir with its new score columns
    outdf = out_df.merge(merge_df_ref, how='left', on='gRNA_ref')
    outdf = outdf.merge(merge_df_alt, how='left', on='gRNA_alt')
    return(outdf)

def parse_args(args, spec_locus=False):
    """
    Abstracing arg parser for both guide generating functions.
    """
    global CAS_LIST
    CAS_LIST = list(args['<cas_types>'].split(','))
    guide_length = int(args['<guide_length>'])
    ref = Fasta(args['<ref_fasta>'], as_raw=True)
    # error message if ref gen not specified for CRISPOR
    if args['--crispor'] and not args['<ref_gen>']:
        logging.info('Must specify ref_gen is option --crispor.')
        exit()
    if spec_locus:
        locus = spec_locus
    else:
        locus = args['<locus>']
    return args['<out_dir>'], args['<pams_dir>'], args['<gens_file>'], args['<targ_file>'], locus, ref, CAS_LIST, guide_length

def check_hom_gens(gens):
    """
    Prints out messages if no variants are found. 
    """
    if gens.empty and args['--hom']:
        print('No variants in that region in this genome, using PAMs from reference only.')
    elif gens.empty and not args['--hom']:
        print('No heterozygous variants in that region in this genome, exiting.')
        exit(1)

def verify_hdf_files(gen_file, targ_file, chrom, start, stop):
    """
    Compares the hdf files, and makes sure the hdf files contain 
    variants in the specified range.
    """
    start, stop = int(start), int(stop)
    comp = ['chrom', 'pos', 'ref', 'alt']
    if not gen_file[comp].equals(targ_file[comp]):
        print('ERROR: gen file and targ file variants do not match.')
        exit(1)
    #Check chr
    if not all(c == chrom  for c in gen_file['chrom']):
        print("ERROR: variants map to different chromosomes") # Should exit?
    # Check vars
    if not all(start < int(i) < stop  for i in gen_file['pos']):
        print('Warning: Not all variants are between the defined ranges')
    if not any(start < int(i) < stop  for i in gen_file['pos']):
        print('ERROR: no variants in defined range.')
        exit(1)


def get_allele_spec_guides(args, spec_locus=False):
    # outputs dataframe with allele-specific guides

    out_dir, pams_dir, gens, targ_gens, locus, ref_genome, CAS_LIST, guide_length = parse_args(args, spec_locus)

    # load locus variants
    gens = pd.read_hdf(gens)

    check_hom_gens(gens)

    chr_variants = set(gens.pos.tolist())
    if args['--hom']:
        print('There are ' + str(len(chr_variants)) + ' variants in this locus in this genome.')
    else:
        print('There are ' + str(len(chr_variants)) + ' heterozygous variants in this locus in this genome.')

    chrom = locus.split(':')[0]
    if chrom.startswith('chr'):
        chrom = chrom[3:]
    start,stop = locus.split(':')[1].split('-')
    start =int(start) - 50
    stop = int(stop) + 50

    # load variant annotations
    targ_gens = pd.read_hdf(targ_gens)

    verify_hdf_files(gens, targ_gens, chrom, start, stop)


    grna_df = pd.DataFrame(columns=['chrom','start','stop','ref','alt','variant_position_in_guide','gRNA_ref','gRNA_alt',
    'variant_position','strand','cas_type'])
    ind = 0
    # get variants within sgRNA region for 3 prime PAMs (guide_length bp upstream of for pos and vice versa)

    for cas in CAS_LIST:
            pam_for_pos = np.load(os.path.join(pams_dir, f'chr{chrom}_{cas}_pam_sites_for.npy')).tolist()
            pam_for_pos = list(filter(lambda x: x >= start and x <= stop, pam_for_pos))
            pam_rev_pos = np.load(os.path.join(pams_dir, f'chr{chrom}_{cas}_pam_sites_rev.npy')).tolist()
            pam_rev_pos = list(filter(lambda x: x >= start and x <= stop, pam_rev_pos))
            if cas in TP_CAS_LIST:
                print(f'Currently evaluating {cas}.')
                if cas in crisprtools.tpp_for.keys():
                    pam_length = crisprtools.tpp_for[cas][1]
                else:
                    print('Something is wrong, exiting.') # change this to actual exception
                    exit(0)
                cas_prox_vars = []
                vars_near_pams = targ_gens.query(f'var_near_{cas} == 1')
                vars_make_pam = targ_gens.query(f'makes_{cas} == 1')
                vars_destroy_pam = targ_gens.query(f'breaks_{cas} == 1')
                # vars_in_pam = targ_gens.query(f'(makes_{cas} == 1) or (breaks_{cas} == 1)')
                for index, row in vars_near_pams.iterrows():
                    var = row['pos']
                    proximal_sites_for = list(range(row['pos'], row['pos']+guide_length+1))
                    nearby_for_pams = list(set(proximal_sites_for) & set(pam_for_pos))
                    for pam_site in nearby_for_pams:

                        grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, row['ref'], row['alt'], guide_length, ref_genome, var_type='near_pam')

                        grna_df.loc[ind] = ['chr'+str(chrom), (pam_site - guide_length - 1), (pam_site - 1), row['ref'], row['alt'],
                        (pam_site - var - 1 + pam_length), grna_ref_seq, grna_alt_seq, var, '+', cas]
                        ind += 1

                    proximal_sites_rev = list(range(row['pos']-guide_length,row['pos']))
                    nearby_rev_pams = list(set(proximal_sites_rev) & set(pam_rev_pos))
                    for pam_site in nearby_rev_pams:

                        grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, row['pos'], row['ref'], row['alt'], guide_length, ref_genome, 
                            strand='negative', var_type='near_pam')
                        if not args['-c']:
                            grna_ref_seq, grna_alt_seq = make_rev_comp(grna_ref_seq), make_rev_comp(grna_alt_seq)

                        grna_df.loc[ind] = ['chr'+str(chrom), pam_site, pam_site + guide_length, row['ref'], row['alt'],
                        var - pam_site + pam_length - 1, grna_ref_seq, grna_alt_seq, var, '-', cas]
                        ind += 1

                for index, row in vars_destroy_pam.iterrows():
                    var = row['pos']
                    ref = row['ref']
                    alt = row['alt']
                    ref_seq = ref_genome['chr'+str(chrom)][var - 11:var + 10]

                    if len(ref) > len(alt):  # handles deletions
                        alt_seq = ref_genome['chr'+str(chrom)][var - 11:var - 1] + alt + ref_genome['chr'+str(chrom)][
                                                                             var + len(ref) + len(alt) - 2:var + len(ref) + len(
                                                                                 alt) - 2 + 10]
                    else:
                        alt_seq = ref_genome['chr'+str(chrom)][var - 11:var - 1] + alt + ref_genome['chr'+str(chrom)][
                                                                             var + len(alt) - 1:var + len(alt) - 1 + 10]

                    ref_pams_for, ref_pams_rev = crisprtools.find_spec_pams(cas, ref_seq)
                    alt_pams_for, alt_pams_rev = crisprtools.find_spec_pams(cas, alt_seq)

                    lost_pams_for = list(set(ref_pams_for).difference(set(alt_pams_for)))
                    lost_pams_rev = list(set(ref_pams_rev).difference(set(alt_pams_rev)))

                    for pam in lost_pams_for:
                        pam_site = pam + var - 11
                        ref_allele = ref
                        alt_allele = alt
                        grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, alt_allele, guide_length, ref_genome, 
                            var_type='destroys_pam')

                        grna_df.loc[ind] = ['chr'+str(chrom), (pam_site - guide_length), (pam_site), row['ref'], row['alt'],
                        (pam_site + pam_length - var), grna_ref_seq, grna_alt_seq, var, '+', cas]
                        ind += 1
                        pam_pos.append(pam_site)

                    for pam in lost_pams_rev:
                        pam_site = pam + var - 11
                        ref_allele = ref
                        alt_allele = alt
                        grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, alt_allele, guide_length, ref_genome, 
                            strand='negative', var_type='destroys_pam')
                        if not args['-c']:
                            grna_ref_seq, grna_alt_seq = make_rev_comp(grna_ref_seq), make_rev_comp(grna_alt_seq)

                        grna_df.loc[ind] = ['chr'+str(chrom), (pam_site), (pam_site + guide_length), ref_allele, alt_allele,
                        (var - pam_site + pam_length - 1), grna_ref_seq, grna_alt_seq, var, '-', cas]
                        ind += 1

                for index, row in vars_make_pam.iterrows():
                    var = row['pos']
                    ref = row['ref']
                    alt = row['alt']

                    ref_seq = ref_genome['chr'+str(chrom)][var - 11:var + 10]

                    if len(ref) > len(alt):  # handles deletions
                        alt_seq = ref_genome['chr'+str(chrom)][var - 11:var - 1] + alt + ref_genome['chr'+str(chrom)][
                                                                             var + len(ref) + len(alt) - 2:var + len(ref) + len(
                                                                                 alt) - 2 + 10]
                    else:
                        alt_seq = ref_genome['chr'+str(chrom)][var - 11:var - 1] + alt + ref_genome['chr'+str(chrom)][
                                                                             var + len(alt) - 1:var + len(alt) - 1 + 10]
        
                    ref_pams_for, ref_pams_rev = crisprtools.find_spec_pams(cas, ref_seq)
                    alt_pams_for, alt_pams_rev = crisprtools.find_spec_pams(cas, alt_seq)

                    made_pams_for = list(set(alt_pams_for).difference(set(ref_pams_for)))
                    made_pams_rev = list(set(alt_pams_rev).difference(set(ref_pams_rev)))

                    for pam in made_pams_for:
                        pam_site = var - 11 + pam
                        ref_allele = ref
                        alt_allele = alt
                        grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, alt_allele, guide_length, ref_genome, 
                            var_type='makes_pam')

                        grna_df.loc[ind] = ['chr'+str(chrom), (pam_site - guide_length), (pam_site), row['ref'], row['alt'],
                        (pam_site + pam_length - var), grna_ref_seq, grna_alt_seq, var, '+', cas]
                        ind += 1

                    for pam in made_pams_rev:
                        pam_site = var - 11 + pam
                        ref_allele = ref
                        alt_allele = alt
                        grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, alt_allele, guide_length, ref_genome, 
                            strand='negative', var_type='makes_pam')
                        if not args['-c']:
                            grna_ref_seq, grna_alt_seq = make_rev_comp(grna_ref_seq), make_rev_comp(grna_alt_seq)

                        grna_df.loc[ind] = ['chr'+str(chrom), (pam_site), (pam_site + guide_length), ref_allele, alt_allele,
                        (var - pam_site + pam_length - 1), grna_ref_seq, grna_alt_seq, var, '-', cas]
                        ind += 1

               

    grna_df = grna_df.query('variant_position_in_guide != 2')


    # add specificity scores if specified
    if args['--crispor']:
        out = get_crispor_scores(out, out_dir, args['<ref_gen>'])
    # get rsID and AF info if provided
    if args['<gene_vars>']:
        gene_vars = pd.read_hdf(args['<gene_vars>'])
        if not str(gene_vars['chrom'].tolist()[0]).startswith('chr'):
            gene_vars['chrom'] = list(map(lambda x: 'chr' + str(x), gene_vars['chrom']))
        gene_vars = gene_vars.rename(index=str, columns={"pos": "variant_position"})

        out = out.merge(gene_vars, how='left', on=['chrom','variant_position','ref','alt'])
    return grna_df


def get_guides(args, spec_locus=False):
    # outputs dataframe with individual-specific (not allele-specific) guides

    out_dir, pams_dir, gens, targ_gens, locus, ref_genome, CAS_LIST, guide_length = parse_args(args, spec_locus)
    
    # load locus variants
    gens = pd.read_hdf(gens)
    
    # split into hets and homs

    gens['het'] = gens['genotype'].apply(het)
    het_gens = gens.query('het')
    hom_gens = gens.query('not het')

    check_hom_gens(gens)

    het_variants = set(het_gens.pos.tolist())
    hom_variants = set(hom_gens.pos.tolist())
    print('There are ' + str(len(het_variants)) + ' heterozygous variants and \
        ' + str(len(hom_variants)) + ' homozygous variants in this locus in this genome.')
      
    # get locus info  
    chrom = locus.split(':')[0]
    if chrom.startswith('chr'):
        chrom = chrom[3:]
    start,stop = locus.split(':')[1].split('-')
    start =int(start) - 50
    stop = int(stop) + 50

    # load variant annotations
    targ_gens = pd.read_hdf(targ_gens)
    targ_gens['het'] = targ_gens['genotype'].apply(het)

    verify_hdf_files(gens, targ_gens, chrom, start, stop)
    # initialize dictionary to save locations of PAM proximal variants
    pam_prox_vars = {}

    # initialize lists that will eventually become the output dataframe
    starts = []
    stops = []
    refs = []
    alts = []
    grnas = []
    variant_pos_in_guides = [] # keep this for annotation homozygous only
    cas_types = []
    chroms = []
    variants_positions = []
    strands = []
    pam_pos = []

    # get sgRNAs with 3' PAMs
    for cas in CAS_LIST:
            pam_for_pos = np.load(os.path.join(pams_dir, f'chr{chrom}_{cas}_pam_sites_for.npy')).tolist()
            pam_for_pos = list(filter(lambda x: x >= start and x <= stop, pam_for_pos))
            pam_rev_pos = np.load(os.path.join(pams_dir, f'chr{chrom}_{cas}_pam_sites_rev.npy')).tolist()
            pam_rev_pos = list(filter(lambda x: x >= start and x <= stop, pam_rev_pos))
            if cas in TP_CAS_LIST:
                print(f'Currently evaluating {cas}.')
                if cas in crisprtools.tpp_for.keys():
                    pam_length = crisprtools.tpp_for[cas][1]
                else:
                    print('Something is wrong, exiting.') # change this to actual exception
                cas_prox_vars = []
                vars_near_pams = targ_gens.query(f'var_near_{cas} == 1')
                het_vars_near_pams = list(set(vars_near_pams.pos).intersection(set(het_variants)))
                hom_vars_near_pams = list(set(vars_near_pams.pos).intersection(set(hom_variants)))
                vars_make_pam = targ_gens.query(f'makes_{cas} == 1')
                vars_destroy_pam = targ_gens.query(f'breaks_{cas} == 1')
                # check each possible existing gRNA for instances that break it or change the sgRNA sequence
                for pos in pam_for_pos:
                    # disqualify sgRNAs with het variants in sgRNA seed region
                    if any(het_variant in range(pos-21,pos) for het_variant in het_vars_near_pams):
                        continue
                    # disqualify sgRNAs where variant destroys PAM site (het or hom doesn't matter)
                    elif any(variant in range(pos, pos+pam_length+1) for variant in vars_destroy_pam):
                        continue
                    # amend any sgRNAs with homozygous variants in the sgRNA seed region
                    elif any(variant in range(pos-21,pos) for variant in hom_vars_near_pams):
                        vars_in_sgRNA = list(set(list(range(pos-21,pos))).intersection(set(hom_vars_near_pams)))
                        pam_site = pos
                        if len(vars_in_sgRNA) == 1:
                            var = vars_in_sgRNA[0]
                            ref_allele = hom_gens.query('pos == @pos')['ref']
                            alt_allele = hom_gens.query('pos == @pos')['alt']
                            grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, 
                            alt_allele, guide_length, ref_genome, var_type='near_pam')
                            starts.append(pos - guide_length - 1)
                            stops.append(pos - 1)
                            refs.append(ref_allele)
                            alts.append(alt_allele)
                            grnas.append(grna_alt_seq)
                            variant_pos_in_guides.append(pam_site - var - 1 + pam_length)
                            strands.append('+')
                            pam_pos.append(pos)
                            chroms.append(chrom)
                            cas_types.append(cas)
                            variants_positions.append(var)
                        else:
                            print(f'Multiple variants in guide for PAM @ {pos}, not equipped for this yet. Skipping.')
                            continue
                    else:
                        # assume sgRNA isn't disrupted by anything
                        starts.append(pos - guide_length - 1)
                        stops.append(pos - 1)
                        refs.append(np.nan)
                        alts.append(np.nan)
                        grnas.append(ref_genome['chr'+str(chrom)][pos - guide_length - 1:pos - 1])
                        variant_pos_in_guides.append(np.nan)
                        strands.append('+')
                        pam_pos.append(pos)
                        chroms.append(chrom)
                        cas_types.append(cas)
                        variants_positions.append(np.nan)

                # add PAMs made by homozygous variants in forward and reverse direction
                for index, row in targ_gens.query(f'(makes_{cas} == 1) and (not het)').iterrows():
                    var = row['pos']
                    ref = row['ref']
                    alt = row['alt']

                    ref_seq = ref_genome['chr'+str(chrom)][var - 11:var + 10]

                    if len(ref) > len(alt):  # handles deletions
                        alt_seq = ref_genome['chr'+str(chrom)][var - 11:var - 1] + alt + ref_genome['chr'+str(chrom)][
                                                                             var + len(ref) + len(alt) - 2:var + len(ref) + 
                                                                             len(alt) - 2 + 10]
                    else:
                        alt_seq = ref_genome['chr'+str(chrom)][var - 11:var - 1] + alt + ref_genome['chr'+str(chrom)][
                                                                             var + len(alt) - 1:var + len(alt) - 1 + 10]
        
                    ref_pams_for, ref_pams_rev = crisprtools.find_spec_pams(cas, ref_seq)
                    alt_pams_for, alt_pams_rev = crisprtools.find_spec_pams(cas, alt_seq)

                    made_pams_for = list(set(alt_pams_for).difference(set(ref_pams_for)))
                    made_pams_rev = list(set(alt_pams_rev).difference(set(ref_pams_rev)))

                    for pam_start in made_pams_for:
                        pam_site = var - 11 + pam
                        ref_allele = ref
                        alt_allele = alt
                        grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, alt_allele, guide_length, ref_genome, 
                            var_type='makes_pam')
                        starts.append(pam_site - guide_length)
                        stops.append(pam_site)
                        refs.append(ref_allele)
                        alts.append(alt_allele)
                        grnas.append(grna_ref_seq)
                        variant_pos_in_guides.append(pam_site + pam_length - var)
                        cas_types.append(cas)
                        chroms.append(chrom)
                        variants_positions.append(var)
                        strands.append('+')
                        pam_pos.append(pam_site)
                    for pam_start in made_pams_rev:
                        pam_site = var - 11 + pam
                        ref_allele = ref
                        alt_allele = alt
                        grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, alt_allele, guide_length, ref_genome, 
                            strand='negative', var_type='makes_pam')
                        if not args['-c']:
                            grna_ref_seq, grna_alt_seq = make_rev_comp(grna_ref_seq), make_rev_comp(grna_alt_seq)
                        start = pam_site
                        starts.append(start)
                        stop = pam_site + guide_length
                        stops.append(stop)
                        refs.append(ref_allele)
                        alts.append(alt_allele)
                        grnas.append(grna_ref_seq)
                        var_pos = var - pam_site + pam_length
                        variant_pos_in_guides.append(var_pos)
                        cas_types.append(cas)
                        chroms.append(chrom)
                        variants_positions.append(var)
                        strands.append('-')
                        pam_pos.append(pam_site)
                # evaluate PAMs on negative strand (reverse direction)
                for pos in pam_rev_pos:
                    # disqualify sgRNAs with het variants in sgRNA seed region
                    if any(het_variant in range(pos+1,pos+22) for het_variant in het_vars_near_pams):
                        continue
                    # disqualify sgRNAs where variant destroys PAM site (het or hom doesn't matter)
                    elif any(variant in range(pos - pam_length, pos+1) for variant in vars_destroy_pam):
                        continue
                    # amend any sgRNAs with homozygous variants in the sgRNA seed region
                    elif any(variant in range(pos+1,pos+22) for variant in hom_vars_near_pams):
                        vars_in_sgRNA = list(set(list(range(pos+1,pos+22))).intersection(set(hom_vars_near_pams)))
                        pam_site = pos
                        if len(vars_in_sgRNA) == 1:
                            var = vars_in_sgRNA[0]
                            ref_allele = hom_gens.query('pos == @pos')['ref']
                            alt_allele = hom_gens.query('pos == @pos')['alt']
                            grna_ref_seq, grna_alt_seq = get_alt_seq(chrom, pam_site, var, ref_allele, 
                            alt_allele, guide_length, ref_genome, var_type='near_pam', strand='negative')
                            starts.append(pam_site)
                            stops.append(pam_site + guide_length)
                            refs.append(ref_allele)
                            alts.append(alt_allele)
                            grnas.append(grna_alt_seq)
                            variant_pos_in_guides.append(var - pam_site + pam_length - 1)
                            strands.append('-')
                            pam_pos.append(pos)
                            chroms.append(chrom)
                            cas_types.append(cas)
                            variants_positions.append(var)
                        else:
                            print(f'Multiple variants in guide for PAM @ {pos}, not equipped for this yet. Skipping.')
                            continue
                    else:
                        # assume sgRNA isn't disrupted by anything
                        starts.append(pos)
                        stops.append(pos + guide_length)
                        refs.append(np.nan)
                        alts.append(np.nan)
                        grnas.append(ref_genome['chr'+str(chrom)][pos:pos + guide_length])
                        variant_pos_in_guides.append(np.nan)
                        strands.append('-')
                        pam_pos.append(pos)
                        chroms.append(chrom)
                        cas_types.append(cas)
                        variants_positions.append(np.nan)
            

    chroms = list(map(lambda x: 'chr'+str(x),chroms))

    out = pd.DataFrame({'chrom':chroms,'start':starts, 'stop':stops, 'ref':refs, 'alt':alts,
        'cas_type':cas_types, 'gRNAs':grnas, 'variant_position_in_guide':variant_pos_in_guides,
        'variant_position':variants_positions, 'strand': strands})

    out = out[['chrom','start','stop','ref','alt','variant_position_in_guide','gRNAs',
    'variant_position','strand','cas_type']]
    out = out.query('variant_position_in_guide != 2')
    # add specificity scores if specified
    if args['--crispor']:
        out = get_crispor_scores(out, out_dir, args['<ref_gen>'])
    # get rsID and AF info if provided
    if args['<gene_vars>']:
        gene_vars = pd.read_hdf(args['<gene_vars>'])
        if not str(gene_vars['chrom'].tolist()[0]).startswith('chr'):
            gene_vars['chrom'] = list(map(lambda x: 'chr' + str(x), gene_vars['chrom']))
        gene_vars['variant_position'] = gene_vars['pos']
        out = out.merge(gene_vars, how='left', on=['chrom','variant_position','ref','alt'])
    return out


def main(args):
    
    #print(args)

    if args['--multi']:
        print('Running as multi-locus, assumes BED file given.')
        if not args['<locus>'].endswith('.bed'):
            print('Must use BED file in place of locus for --multi run. Exiting.')
            exit()
        regions = pd.read_csv(args['<locus>'], sep='\t', header=0,
            names=['chrom','start','stop','name'])
        out_list = []
        out = pd.DataFrame()
        if args['--hom']:
            print('Finding non-allele-specific guides.')
            for index, row in regions.iterrows():
                chrom = row['chrom']
                start = row['start']
                stop = row['stop']
                print(row['name'])
                guides_df = get_guides(args, spec_locus=f'{chrom}:{start}-{stop}')
                guides_df['locus'] = row['name']
                print(guides_df.head())
                out_list.append(guides_df)
        else:
            print('Finding allele-specific guides.')
            for index, row in regions.iterrows():
                chrom = row['chrom']
                start = row['start']
                stop = row['stop']
                print(row['name'])
                guides_df = get_allele_spec_guides(args, spec_locus=f'{chrom}:{start}-{stop}')
                guides_df['locus'] = row['name']
                out_list.append(guides_df)
        out = pd.concat(out_list)
    elif args['--hom']:
        print('Finding non-allele-specific guides.')
        out = get_guides(args)
    else:
        print('Finding allele-specific guides.')
        out = get_allele_spec_guides(args)
    
    out['guide_id'] = 'guide' + out.index.astype(str)
    
    if args['<gene_vars>']:
        for i, row in out.iterrows():
            if pd.isnull(row['rsID']):
                out.ix[i,'rsID'] = ':'.join([row['chrom'],str(row['variant_position']),row['ref'], row['alt']])
                out.ix[i,'AF'] = 0

    out.to_csv(args['<out_dir>'] + 'guides.tsv', sep='\t', index=False)
    print('Done.')


if __name__ == '__main__':
    arguments = docopt(__doc__, version=__version__)
    main(arguments)
