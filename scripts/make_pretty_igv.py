#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
gen_sgRNAs.py generates sgRNAs as part of ExcisionFinder. Written in Python v 3.6.1.
Kathleen Keough and Michael Olvera 2018.

Usage:
	make_pretty_igv.py <guides_file> <igv_formatted_file_name> <track_name>

Arguments:
	guides_file				Non-IGV-formatted guides file generated by gen_sgRNAs.py 
	igv_formatted_file_name	Name for the outputted IGV-formatted guides BED file.
	track_name				Name of the track in IGV.

"""

import pandas as pd
import sys
import crisprtools as cpt
from docopt import docopt

__version__ = '0.0.0'

# gene_vars = pd.read_csv(gene_vars_file, sep='\t',header=None,
#                        names=['chrom','variant_position','ref','alt','rsID','AF'])

def adjusted_length(row):
	"""
	Adds on the length of the PAM to the sequnce length.
	"""
	cas = row['cas_type']
	if row['strand'] == '+':
		return (row['start'],row['stop']+cpt.tpp_for[cas][1]) 
	else: 
		return (row['start']-cpt.tpp_for[cas][1],row['stop'])

def main(args):
	print(args)
	gene_bed = pd.read_csv(args['<guides_file>'], sep='\t')
	outfile = args['<igv_formatted_file_name>']
	track_name = args['<track_name>']
	gene_bed['full_start'], gene_bed['full_stop'] = zip(* gene_bed.apply(adjusted_length, axis=1))
	gene_bed['variant position in guide'] = gene_bed['variant_position_in_guide']
	gene_bed['score'] = 1000*(1/(gene_bed['variant_position_in_guide'] + 1))
	gene_bed['guide_id'] = gene_bed.index
	if 'rsID' in gene_bed.columns:
		gene_bed['label'] = gene_bed.apply(lambda row: str(row['guide_id'])+\
			'_'+str(row['variant_position_in_guide'])+'_'+str(row['rsID']+'_AF'+str(row['AF'])), axis=1) 
	else:
		gene_bed['label'] = gene_bed.apply(lambda row: str(row['guide_id'])+\
				'_'+str(row['variant_position_in_guide']), axis=1) 

	gene_bed_display = gene_bed[['chrom','full_start','full_stop','label','score','strand','start','stop']]

	header_str = f'track name={track_name} description=AS cut sites as produced by ExcisionFinder visibility=3 useScore=1'

	gene_bed_display.to_csv(outfile+'.bed',sep='\t',index=False,
	                       header=[header_str,'','','','','','',''])

if __name__ == '__main__':
    arguments = docopt(__doc__, version=__version__)
    main(arguments)